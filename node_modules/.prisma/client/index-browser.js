
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.0
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.0",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.AdminScalarFieldEnum = {
  adminId: 'adminId',
  email: 'email',
  password: 'password',
  name: 'name',
  createdAt: 'createdAt'
};

exports.Prisma.AutoCalibrationScalarFieldEnum = {
  autoCalibrationId: 'autoCalibrationId',
  skill: 'skill',
  membership: 'membership',
  category: 'category',
  FR: 'FR',
  CL: 'CL',
  ML: 'ML',
  QA: 'QA',
  JAVA: 'JAVA',
  PHP: 'PHP'
};

exports.Prisma.DevelopmentExperienceScalarFieldEnum = {
  developmentExperienceId: 'developmentExperienceId',
  specId: 'specId',
  startDate: 'startDate',
  duration: 'duration',
  assignedTask: 'assignedTask',
  teamSize: 'teamSize',
  totalProjectHeadcount: 'totalProjectHeadcount',
  projectName: 'projectName',
  jobDuties: 'jobDuties',
  img: 'img',
  autoCalibrationId: 'autoCalibrationId'
};

exports.Prisma.PortfolioScalarFieldEnum = {
  portfolioId: 'portfolioId',
  specId: 'specId',
  heading: 'heading',
  url: 'url'
};

exports.Prisma.PreviousWorkScalarFieldEnum = {
  previousWorkId: 'previousWorkId',
  specId: 'specId',
  industry: 'industry',
  occupation: 'occupation',
  JobDuties: 'JobDuties'
};

exports.Prisma.QualificationScalarFieldEnum = {
  qualificationId: 'qualificationId',
  specId: 'specId',
  credential: 'credential',
  acquisitionDate: 'acquisitionDate'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.RequestScalarFieldEnum = {
  applicationId: 'applicationId',
  userId: 'userId',
  status: 'status',
  adminComment: 'adminComment',
  engineerComment: 'engineerComment',
  adminId: 'adminId',
  createdAt: 'createdAt',
  resultedAt: 'resultedAt'
};

exports.Prisma.SellingPointScalarFieldEnum = {
  sellingPointId: 'sellingPointId',
  specId: 'specId',
  title: 'title',
  content: 'content'
};

exports.Prisma.SkillPointScalarFieldEnum = {
  skillPointId: 'skillPointId',
  userId: 'userId',
  FR: 'FR',
  BK: 'BK',
  DB: 'DB',
  SBR: 'SBR',
  AR: 'AR',
  TS: 'TS',
  COM: 'COM'
};

exports.Prisma.SkillScalarFieldEnum = {
  skillId: 'skillId',
  userId: 'userId',
  InherentName: 'InherentName',
  InherentDescription: 'InherentDescription',
  numericalNumber: 'numericalNumber',
  numericalExplain: 'numericalExplain',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillSummaryScalarFieldEnum = {
  skillSummaryId: 'skillSummaryId',
  specId: 'specId',
  autoCalibrationId: 'autoCalibrationId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.SpaecialAbilityScalarFieldEnum = {
  spaecialAbilityId: 'spaecialAbilityId',
  userId: 'userId',
  skillList: 'skillList',
  skillSelection: 'skillSelection'
};

exports.Prisma.SpecScalarFieldEnum = {
  specId: 'specId',
  userId: 'userId',
  github: 'github',
  offHours: 'offHours',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  email: 'email',
  employeeNumber: 'employeeNumber',
  joinDate: 'joinDate',
  userName: 'userName',
  affiliation: 'affiliation',
  businessSituation: 'businessSituation',
  password: 'password',
  confirmPassword: 'confirmPassword',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};


exports.Prisma.ModelName = {
  user: 'user',
  skill: 'skill',
  skillPoint: 'skillPoint',
  spaecialAbility: 'spaecialAbility',
  spec: 'spec',
  portfolio: 'portfolio',
  skillSummary: 'skillSummary',
  sellingPoint: 'sellingPoint',
  qualification: 'qualification',
  previousWork: 'previousWork',
  developmentExperience: 'developmentExperience',
  autoCalibration: 'autoCalibration',
  request: 'request',
  admin: 'admin'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
